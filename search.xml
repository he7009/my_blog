<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mysql 配置、启动、系统变量</title>
      <link href="2021/03/11/mysql/mysql-pei-zhi-qi-dong-xi-tong-bian-liang/"/>
      <url>2021/03/11/mysql/mysql-pei-zhi-qi-dong-xi-tong-bian-liang/</url>
      
        <content type="html"><![CDATA[<h2 id="命令行中配置选项"><a href="#命令行中配置选项" class="headerlink" title="命令行中配置选项"></a>命令行中配置选项</h2><hr><p>命令行中配置选项分为长形式和短形式方式。例如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 配置默认的存储引擎-长形式</span>mysql<span class="token operator">></span> mysqld <span class="token comment">--default-storage-engine=MyISAM</span><span class="token comment"># 链接数据库-短形式</span>mysql<span class="token operator">></span> mysql <span class="token operator">-</span>h127<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token number">.1</span> <span class="token operator">-</span>uroot <span class="token operator">-</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="长形式"><a href="#长形式" class="headerlink" title="长形式"></a>长形式</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--启动选项1[=值1] --启动选项2[=值2] ... --启动选项n[=值n]</span><span class="token comment"># 例如：</span>mysql<span class="token operator">></span> mysqld <span class="token comment">--default-storage-engine=MyISAM</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>选项名前加上<code>--</code>前缀</li><li>如果选项名是由多个单词构成的，它们之间可以由短划线<code>-</code>连接起来，也可以使用下划线<code>_</code>连接起来</li><li>选项名、=、选项值之间不可以有空白字符</li></ol><h3 id="短形式"><a href="#短形式" class="headerlink" title="短形式"></a>短形式</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">-</span>启动选项<span class="token number">1</span><span class="token punctuation">[</span>空格<span class="token punctuation">]</span><span class="token punctuation">[</span>值<span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span>启动选项<span class="token number">2</span><span class="token punctuation">[</span>空格<span class="token punctuation">]</span><span class="token punctuation">[</span>值<span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">-</span>启动选项n<span class="token punctuation">[</span>空格<span class="token punctuation">]</span><span class="token punctuation">[</span>值n<span class="token punctuation">]</span><span class="token comment"># 例如：</span>mysql<span class="token operator">></span> mysql <span class="token operator">-</span>h127<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token number">.1</span> <span class="token operator">-</span>uroot <span class="token operator">-</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>短形式的选项名只有一个字母，选项名前只加一个短划线<code>-</code>前缀</li><li>选项名和选项值之间可以没有间隙，或者用空白字符隔开</li><li><code>-p</code>选项有些特殊，<code>-p</code>和密码值之间不能有空白字符</li></ol><h2 id="配置文件中配置选项"><a href="#配置文件中配置选项" class="headerlink" title="配置文件中配置选项"></a>配置文件中配置选项</h2><hr><h3 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h3><p>与在命令行中指定启动选项不同的是，配置文件中的启动选项被划分为若干个组，每个组有一个组名，用中括号<code>[]</code>扩起来，像这样：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>server<span class="token punctuation">]</span>option1     <span class="token comment">#这是option1，该选项不需要选项值</span>option2 <span class="token operator">=</span> value2      <span class="token comment">#这是option2，该选项需要选项值</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token punctuation">(</span>具体的启动选项<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">[</span>mysqld_safe<span class="token punctuation">]</span><span class="token punctuation">(</span>具体的启动选项<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">[</span>client<span class="token punctuation">]</span><span class="token punctuation">(</span>具体的启动选项<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">[</span>mysql<span class="token punctuation">]</span><span class="token punctuation">(</span>具体的启动选项<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">[</span>mysqladmin<span class="token punctuation">]</span><span class="token punctuation">(</span>具体的启动选项<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>配置文件中只能使用长形式的选项</li><li>定的启动选项不允许加<code>--</code>前缀，并且每行只指定一个选项</li><li><code>=</code>周围可以有空白字符</li><li>使用<code>#</code>来添加注释，从<code>#</code>出现直到行尾的内容都属于注释内容，读取配置文件时会忽略这些注释内容</li></ol><h3 id="加载配置选项"><a href="#加载配置选项" class="headerlink" title="加载配置选项"></a>加载配置选项</h3><p>配置文件中不同的选项组是给不同的启动命令使用的，如果选项组名称与程序名称相同，则组中的选项将专门应用于该程序。有两个选项组比较特别：</p><ul><li><p><code>[server]</code>组下边的启动选项将作用于所有的服务器程序。</p></li><li><p><code>[client]</code>组下边的启动选项将作用于所有的客户端程序。</p></li></ul><p>需要注意的一点是，<code>mysqld_safe</code>和<code>mysql.server</code>这两个程序在启动时都会读取<code>[mysqld]</code>选项组中的内容。读取如下：</p><table><thead><tr><th>启动命令</th><th>类别</th><th>能读取的组</th></tr></thead><tbody><tr><td>mysqld</td><td>启动服务器</td><td><code>[mysqld]</code>、<code>[server]</code></td></tr><tr><td>mysqld_safe</td><td>启动服务器</td><td><code>[mysqld]</code>、<code>[server]</code>、<code>[mysqld_safe]</code></td></tr><tr><td>mysql.server</td><td>启动服务器</td><td><code>[mysqld]</code>、<code>[server]</code>、<code>[mysql.server]</code></td></tr><tr><td>mysql</td><td>启动客户端</td><td><code>[mysql]</code>、<code>[client]</code></td></tr><tr><td>mysqladmin</td><td>启动客户端</td><td><code>[mysqladmin]</code>、<code>[client]</code></td></tr><tr><td>mysqldump</td><td>启动客户端</td><td><code>[mysqldump]</code>、<code>[client]</code></td></tr></tbody></table><h2 id="配置项优先级"><a href="#配置项优先级" class="headerlink" title="配置项优先级"></a>配置项优先级</h2><hr><ol><li>命令行配置 &gt; 配置文件</li><li>多个配置文件配置相同配置项，以最后一个读取的配置文件配置项为准</li><li>同一个配置项出现在一个配置文件的多个组中，以最后一个出现的组中的配置项为准</li></ol><h2 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h2><hr><h3 id="系统变量作用范围"><a href="#系统变量作用范围" class="headerlink" title="系统变量作用范围"></a>系统变量作用范围</h3><ul><li><p><code>GLOBAL</code>：全局变量，影响服务器的整体操作。</p></li><li><p><code>SESSION</code>：会话变量，影响某个客户端连接的操作。（注：<code>SESSION</code>有个别名叫<code>LOCAL</code>）</p></li></ul><h3 id="查看系统变量"><a href="#查看系统变量" class="headerlink" title="查看系统变量"></a>查看系统变量</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SHOW</span> <span class="token punctuation">[</span><span class="token keyword">GLOBAL</span><span class="token operator">|</span><span class="token keyword">SESSION</span><span class="token punctuation">]</span> VARIABLES <span class="token punctuation">[</span><span class="token operator">LIKE</span> 匹配的模式<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置系统变量"><a href="#设置系统变量" class="headerlink" title="设置系统变量"></a>设置系统变量</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token punctuation">[</span><span class="token keyword">GLOBAL</span><span class="token operator">|</span><span class="token keyword">SESSION</span><span class="token punctuation">]</span> 系统变量名 <span class="token operator">=</span> 值<span class="token punctuation">;</span><span class="token comment"># 或者</span><span class="token keyword">SET</span> <span class="token punctuation">[</span>@@<span class="token punctuation">(</span><span class="token keyword">GLOBAL</span><span class="token operator">|</span><span class="token keyword">SESSION</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">]</span>var_name <span class="token operator">=</span> XXX<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="状态变量"><a href="#状态变量" class="headerlink" title="状态变量"></a>状态变量</h2><hr><p>为了让我们更好的了解服务器程序的运行情况，<code>MySQL</code>服务器程序中维护了好多关于程序运行状态的变量，它们被称为<code>状态变量</code>。比方说<code>Threads_connected</code>表示当前有多少客户端与服务器建立了连接。</p><p>查看状态变量：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token punctuation">[</span><span class="token keyword">GLOBAL</span><span class="token operator">|</span><span class="token keyword">SESSION</span><span class="token punctuation">]</span> <span class="token keyword">STATUS</span> <span class="token punctuation">[</span><span class="token operator">LIKE</span> 匹配的模式<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment"># 例如：</span><span class="token keyword">SHOW</span> <span class="token keyword">STATUS</span> <span class="token operator">LIKE</span> <span class="token string">'thread%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 用户、权限管理</title>
      <link href="2021/03/05/mysql/mysql-yong-hu-quan-xian-guan-li/"/>
      <url>2021/03/05/mysql/mysql-yong-hu-quan-xian-guan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'用户名'</span><span class="token variable">@'主机地址'</span> identified <span class="token keyword">by</span> <span class="token string">'密码'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token string">'用户名'</span><span class="token variable">@'主机地址'</span> identified <span class="token keyword">by</span> <span class="token string">'密码'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改用户名"><a href="#修改用户名" class="headerlink" title="修改用户名"></a>修改用户名</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">rename</span> <span class="token keyword">user</span> <span class="token string">'旧用户'</span><span class="token variable">@'主机名'</span> <span class="token keyword">TO</span> <span class="token string">'新用户名'</span><span class="token variable">@'主机名'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">grant</span> 权限列表 <span class="token keyword">on</span> 库<span class="token punctuation">.</span>表 <span class="token keyword">to</span> <span class="token string">'用户名'</span><span class="token variable">@'主机地址'</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th align="center">权限</th><th align="center">作用范围</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">all</td><td align="center">服务</td><td align="center">所有权限</td></tr><tr><td align="center">select</td><td align="center">表、列</td><td align="center">选择行</td></tr><tr><td align="center">insert</td><td align="center">表、列</td><td align="center">插入行</td></tr><tr><td align="center">update</td><td align="center">表、列</td><td align="center">更新行</td></tr><tr><td align="center">delete</td><td align="center">表</td><td align="center">删除行</td></tr><tr><td align="center">create</td><td align="center">数据库、表、索引</td><td align="center">创建</td></tr><tr><td align="center">drop</td><td align="center">数据库、表、视图</td><td align="center">删除</td></tr><tr><td align="center">reload</td><td align="center">服务器</td><td align="center">允许使用flush语句</td></tr><tr><td align="center">shutdown</td><td align="center">服务器</td><td align="center">关闭服务</td></tr><tr><td align="center">process</td><td align="center">服务器</td><td align="center">查看线程信息</td></tr><tr><td align="center">file</td><td align="center">服务器</td><td align="center">文件操作</td></tr><tr><td align="center">grant option</td><td align="center">数据库、表、存储过程</td><td align="center">授权</td></tr><tr><td align="center">references</td><td align="center">数据库、表</td><td align="center">外键约束的父表</td></tr><tr><td align="center">index</td><td align="center">表</td><td align="center">创建/删除索引</td></tr><tr><td align="center">alter</td><td align="center">表</td><td align="center">修改表结构</td></tr><tr><td align="center">show databases</td><td align="center">服务器</td><td align="center">查看数据库名称</td></tr><tr><td align="center">super</td><td align="center">服务器</td><td align="center">超级权限</td></tr><tr><td align="center">create temporary tables</td><td align="center">表</td><td align="center">创建临时表</td></tr><tr><td align="center">lock tables</td><td align="center">数据库</td><td align="center">锁表</td></tr><tr><td align="center">execute</td><td align="center">存储过程</td><td align="center">执行</td></tr><tr><td align="center">replication client</td><td align="center">服务器</td><td align="center">允许查看主/从/二进制日志状态</td></tr><tr><td align="center">replication slave</td><td align="center">服务器</td><td align="center">主从复制</td></tr><tr><td align="center">create view</td><td align="center">视图</td><td align="center">创建视图</td></tr><tr><td align="center">show view</td><td align="center">视图</td><td align="center">查看视图</td></tr><tr><td align="center">create routine</td><td align="center">存储过程</td><td align="center">创建存储过程</td></tr><tr><td align="center">alter routine</td><td align="center">存储过程</td><td align="center">修改/删除存储过程</td></tr><tr><td align="center">create user</td><td align="center">服务器</td><td align="center">创建用户</td></tr><tr><td align="center">event</td><td align="center">数据库</td><td align="center">创建/更改/删除/查看事件</td></tr><tr><td align="center">trigger</td><td align="center">表</td><td align="center">触发器</td></tr><tr><td align="center">create tablespace</td><td align="center">服务器</td><td align="center">创建/更改/删除表空间/日志文件</td></tr><tr><td align="center">proxy</td><td align="center">服务器</td><td align="center">代理成为其它用户</td></tr><tr><td align="center">usage</td><td align="center">服务器</td><td align="center">没有权限</td></tr></tbody></table><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">drop</span> <span class="token keyword">user</span> <span class="token string">"用户名"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux ssh免密登录配置</title>
      <link href="2021/03/04/linux/linux-ssh-mian-mi-deng-lu-pei-zhi/"/>
      <url>2021/03/04/linux/linux-ssh-mian-mi-deng-lu-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-ssh免密登录配置"><a href="#Linux-ssh免密登录配置" class="headerlink" title="Linux ssh免密登录配置"></a>Linux ssh免密登录配置</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><hr><p>ssh 通过加密解密的方式进行权限的验证；因此需要在客户端生成一对密钥；同时复制公钥到服务端。</p><h2 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h2><hr><p>客户端终端执行一下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 一顿操作</span>ssh-keygen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>~/.ssh 目录会生成一对密钥；id_rsa (私钥) 、id_rsa.pub（公钥）</p><h2 id="复制公钥到远程服务器"><a href="#复制公钥到远程服务器" class="headerlink" title="复制公钥到远程服务器"></a>复制公钥到远程服务器</h2><hr><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#方法一：ssh-copy-id</span><span class="token comment"># ssh-copy-id - 将你的公共密钥填充到一个远程机器上的authorized_keys文件中</span><span class="token comment"># 远程服务器 ～/.ssh/authorized_keys 文件</span>ssh-copy-id <span class="token operator">&lt;</span>Users<span class="token operator">></span>@host<span class="token comment"># 会提示输入远程服务器密码</span><span class="token comment">#方法二：直接复制内容</span><span class="token comment"># 客户端查看公钥内容</span><span class="token function">cat</span> ~/.ssh/id_rsa.pub<span class="token comment"># 复制内容</span><span class="token comment"># 粘贴到远程服务器 authorized_keys 文件</span><span class="token function">vim</span> ～/.ssh/authorized_key<span class="token comment"># 粘贴后保存</span>:wq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="连接验证"><a href="#连接验证" class="headerlink" title="连接验证"></a>连接验证</h2><hr><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ssh 连接远程服务器</span><span class="token function">ssh</span> <span class="token operator">&lt;</span>Users<span class="token operator">></span>@host<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="SSH-HostName-方式链接配置"><a href="#SSH-HostName-方式链接配置" class="headerlink" title="SSH HostName 方式链接配置"></a>SSH HostName 方式链接配置</h2><hr><p>配置远程服务器地址和用户名，从而避免每次输入用户名和远程服务器地址</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 编辑 ~/.ssh/config 文件 添加配置</span>Host &lt;以后使用的hostname<span class="token punctuation">></span>        HostName 远程服务器地址        User 用户名<span class="token comment"># 示例配置</span>Host aliyunHostName 48.44.102.134        User root     <span class="token comment"># 登录</span>ssh aliyun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO Error 处理</title>
      <link href="2020/12/10/go/go-error-chu-li/"/>
      <url>2020/12/10/go/go-error-chu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="关于错误处理的几点理解"><a href="#关于错误处理的几点理解" class="headerlink" title="关于错误处理的几点理解"></a>关于错误处理的几点理解</h2><hr><ol><li>错误只应该被处理一次，写日志、降级、返回错误等都算作对错误的处理。写了日志、做了降级就不应该继续返回错误；如果返回错误，则不做其他处理。</li><li>错误应该包含错误信息和堆栈信息，以便于后续的错误查找和调试。</li><li>项目中应该尽量简洁明了的进行错误的判断处理。</li></ol><h2 id="早期的错误处理"><a href="#早期的错误处理" class="headerlink" title="早期的错误处理"></a>早期的错误处理</h2><hr><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> errors<span class="token comment">//创建包含错误信息的错误</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>text <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>errorString<span class="token punctuation">&#123;</span>text<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> errorString <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>s <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token comment">//实现 Error 接口</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>errorString<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> e<span class="token punctuation">.</span>s<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只是简单的包含错误的信息，存在两个问题：</p><ul><li>上层无法添加错误信息</li><li>错误信息不包含堆栈信息；不利于调试和错误查找</li></ul><h2 id="GO-1-13-错误处理"><a href="#GO-1-13-错误处理" class="headerlink" title="GO 1.13 错误处理"></a>GO 1.13 错误处理</h2><hr><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//errors package</span><span class="token comment">//判断是否实现 interface &#123; Unwrap() error &#125; 接口，实现则调用返回根错误</span><span class="token keyword">func</span> <span class="token function">Unwrap</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>u<span class="token punctuation">,</span> ok <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">interface</span> <span class="token punctuation">&#123;</span><span class="token function">Unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> u<span class="token punctuation">.</span><span class="token function">Unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//判断 err 错误是否 等于 target 错误，或者包含 target 错误</span><span class="token comment">//如果 err 和 target 是同一个，那么返回true</span><span class="token comment">//如果 err 是一个打包(wrap) 错误;并且 err 包含 target 错误 返回true</span><span class="token comment">//不等于也不包含则返回false</span><span class="token keyword">func</span> <span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> target <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//获取错误中包含的 具体错误，方法内部进行断言</span><span class="token keyword">func</span> <span class="token function">As</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">,</span> target <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//fmt package</span><span class="token comment">//打包根错误、添加错误信息；实现 interface &#123; Unwrap() error &#125; 接口来返回根错误</span><span class="token keyword">func</span> <span class="token function">Errorf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> a <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//wrapErro struct 包装 error</span><span class="token keyword">type</span> wrapError <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>msg <span class="token builtin">string</span>err <span class="token builtin">error</span><span class="token punctuation">&#125;</span><span class="token comment">//实现error接口</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>wrapError<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> e<span class="token punctuation">.</span>msg<span class="token punctuation">&#125;</span><span class="token comment">//实现Unwrap接口</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>wrapError<span class="token punctuation">)</span> <span class="token function">Unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> e<span class="token punctuation">.</span>err<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>GO 1.13 可以通过fmt.Errorf 对错误信息进行wrap,进而添加错误信息;与此同时 errors package 中提供了对错误的Unwrap、 Is、As 方法,用以获取根错误信息和对错误的比较、判断等</p><p>增加了错误信息的wrap但是还是缺少堆栈信息的保存</p><h2 id="pkg-errors"><a href="#pkg-errors" class="headerlink" title="pkg/errors"></a>pkg/errors</h2><hr><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//github.com/pkg/errors</span><span class="token comment">//包含堆栈信息的error</span><span class="token keyword">type</span> fundamental <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>msg <span class="token builtin">string</span><span class="token operator">*</span>stack<span class="token punctuation">&#125;</span><span class="token comment">//实现 error 接口</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>fundamental<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> f<span class="token punctuation">.</span>msg <span class="token punctuation">&#125;</span><span class="token comment">//重写format</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>fundamental<span class="token punctuation">)</span> <span class="token function">Format</span><span class="token punctuation">(</span>s fmt<span class="token punctuation">.</span>State<span class="token punctuation">,</span> verb <span class="token builtin">rune</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">switch</span> verb <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token string">'v'</span><span class="token punctuation">:</span><span class="token keyword">if</span> s<span class="token punctuation">.</span><span class="token function">Flag</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> f<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>f<span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> verb<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">fallthrough</span><span class="token keyword">case</span> <span class="token string">'s'</span><span class="token punctuation">:</span>io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> f<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">'q'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"%q"</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// withStack struct 打包error,包含堆栈信息</span><span class="token keyword">type</span> withStack <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token builtin">error</span><span class="token operator">*</span>stack<span class="token punctuation">&#125;</span><span class="token comment">//实现Cause接口，返回根错误</span><span class="token keyword">func</span> <span class="token punctuation">(</span>w <span class="token operator">*</span>withStack<span class="token punctuation">)</span> <span class="token function">Cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> w<span class="token punctuation">.</span><span class="token builtin">error</span> <span class="token punctuation">&#125;</span><span class="token comment">// 实现Unwrap接口，返回根错误（用于兼容GO 1.13）</span><span class="token keyword">func</span> <span class="token punctuation">(</span>w <span class="token operator">*</span>withStack<span class="token punctuation">)</span> <span class="token function">Unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> w<span class="token punctuation">.</span><span class="token builtin">error</span> <span class="token punctuation">&#125;</span><span class="token comment">// withMessage 打包 error,添加错误信息</span><span class="token keyword">type</span> withMessage <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>cause <span class="token builtin">error</span>msg   <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>w <span class="token operator">*</span>withMessage<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> w<span class="token punctuation">.</span>msg <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> w<span class="token punctuation">.</span>cause<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token comment">//实现Cause接口，返回根错误</span><span class="token keyword">func</span> <span class="token punctuation">(</span>w <span class="token operator">*</span>withMessage<span class="token punctuation">)</span> <span class="token function">Cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>  <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> w<span class="token punctuation">.</span>cause <span class="token punctuation">&#125;</span><span class="token comment">// 实现Unwrap接口，返回根错误（用于兼容GO 1.13）</span><span class="token keyword">func</span> <span class="token punctuation">(</span>w <span class="token operator">*</span>withMessage<span class="token punctuation">)</span> <span class="token function">Unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> w<span class="token punctuation">.</span>cause <span class="token punctuation">&#125;</span><span class="token comment">//基于 fundamental 创建包含 错误信息 和 堆栈信息 的错误</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>message <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">Errorf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//打包（wrap）错误;添加 堆栈信息；</span><span class="token comment">//实现了interface &#123; Cause() error &#125; 接口</span><span class="token comment">//实现了interface &#123; Unwrap() error &#125; 接口兼容 GO 1.13</span><span class="token keyword">func</span> <span class="token function">WithStack</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//打包（wrap）错误;添加 错误信息；</span><span class="token comment">//实现了interface &#123; Cause() error &#125; 接口</span><span class="token comment">//实现了interface &#123; Unwrap() error &#125; 接口兼容 GO 1.13</span><span class="token keyword">func</span> <span class="token function">WithMessage</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">,</span> message <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">WithMessagef</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">,</span> format <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//打包（wrap）错误;添加 错误信息 和 堆栈信息</span><span class="token comment">//实现了interface &#123; Cause() error &#125; 接口</span><span class="token comment">//实现了interface &#123; Unwrap() error &#125; 接口兼容 GO 1.13</span><span class="token keyword">func</span> <span class="token function">Wrap</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">,</span> message <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">Wrapf</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">,</span> format <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断是否实现 interface &#123; Cause() error &#125; 接口，实现则调用返回根错误；等同于 GO 1.13 的 Unwrap()</span><span class="token keyword">func</span> <span class="token function">Cause</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h2><hr><ol><li>综合使用 GO 1.13 和 pgk/errors；pkg/errors 打包处理的错误 GO 1.13 提供的 Unwrap、Is、As 同样可以使用</li><li>自己应用层的代码，出现错误；可以使用 pkg/errors 的包，创建一个包含错误信息 和 堆栈信息的错误进行返回</li><li>对于别人返回的错误，如果是底层的未包含堆栈信息的错误可以使用 wrap 打包错误，添加错误信息 和 堆栈信息</li><li>对于别人返回的错误，如果是已经打包，包含 堆栈信息 的错误则直接返回。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO - Time</title>
      <link href="2020/12/08/go/go-time/"/>
      <url>2020/12/08/go/go-time/</url>
      
        <content type="html"><![CDATA[<h1 id="Go-time"><a href="#Go-time" class="headerlink" title="Go-time"></a>Go-time</h1><h2 id="time-time"><a href="#time-time" class="headerlink" title="time-time"></a>time-time</h2><h2 id="time-Timer"><a href="#time-Timer" class="headerlink" title="time-Timer"></a>time-Timer</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//暂停当前goroutine</span><span class="token keyword">func</span> <span class="token function">Sleep</span><span class="token punctuation">(</span>d Duration<span class="token punctuation">)</span><span class="token comment">//定时器</span><span class="token keyword">type</span> Timer <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>C <span class="token operator">&lt;-</span><span class="token keyword">chan</span> Timer runtimeTimer<span class="token punctuation">&#125;</span><span class="token comment">//暂停timer</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Timer<span class="token punctuation">)</span> <span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//暂停定时器，并且重新开始一个新的定时器</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Timer<span class="token punctuation">)</span> <span class="token function">Reset</span><span class="token punctuation">(</span>d Duration<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//快速创建timer</span><span class="token keyword">func</span> <span class="token function">NewTimer</span><span class="token punctuation">(</span>d Duration<span class="token punctuation">)</span> <span class="token operator">*</span>Timer <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">After</span><span class="token punctuation">(</span>d Duration<span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> Time <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">AfterFunc</span><span class="token punctuation">(</span>d Duration<span class="token punctuation">,</span> f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span>Timer <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//开启协程，执行函数</span><span class="token keyword">func</span> <span class="token function">goFunc</span><span class="token punctuation">(</span>arg <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> seq <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//定时器默认方法；发送当前时间到 channel</span><span class="token keyword">func</span> <span class="token function">sendTime</span><span class="token punctuation">(</span>c <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> seq <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="time-Ticker"><a href="#time-Ticker" class="headerlink" title="time-Ticker"></a>time-Ticker</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//</span><span class="token keyword">type</span> Ticker <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>C <span class="token operator">&lt;-</span><span class="token keyword">chan</span> Time <span class="token comment">// The channel on which the ticks are delivered.</span>r runtimeTimer<span class="token punctuation">&#125;</span><span class="token comment">//暂停ticker</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Ticker<span class="token punctuation">)</span> <span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//快速创建ticker</span><span class="token keyword">func</span> <span class="token function">NewTicker</span><span class="token punctuation">(</span>d Duration<span class="token punctuation">)</span> <span class="token operator">*</span>Ticker <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">Tick</span><span class="token punctuation">(</span>d Duration<span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> Time <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO </tag>
            
            <tag> Time </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO - Context 源码解读</title>
      <link href="2020/12/07/go/go-context-yuan-ma-jie-du/"/>
      <url>2020/12/07/go/go-context-yuan-ma-jie-du/</url>
      
        <content type="html"><![CDATA[<h1 id="GO-Context-源码解读"><a href="#GO-Context-源码解读" class="headerlink" title="GO - Context 源码解读"></a>GO - Context 源码解读</h1><h2 id="核心接口"><a href="#核心接口" class="headerlink" title="核心接口"></a>核心接口</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//Context interface</span><span class="token keyword">type</span> Context <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//返回过期时间</span><span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span>    <span class="token comment">//返回 channel。用来判断 goroutine 是否结束</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//goroutine 结束错误提示</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>    <span class="token comment">//根据Key返回value</span><span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// sentinel Error; 主动 cancel</span><span class="token keyword">var</span> Canceled <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"context canceled"</span><span class="token punctuation">)</span><span class="token comment">// sentinel Error - Deadline Error</span><span class="token keyword">var</span> DeadlineExceeded <span class="token builtin">error</span> <span class="token operator">=</span> deadlineExceededError<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> deadlineExceededError <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>deadlineExceededError<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>   <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">"context deadline exceeded"</span> <span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>deadlineExceededError<span class="token punctuation">)</span> <span class="token function">Timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>   <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>deadlineExceededError<span class="token punctuation">)</span> <span class="token function">Temporary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token comment">//空 Context; 实现 Context interface </span><span class="token keyword">type</span> emptyCtx <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> <span class="token punctuation">(</span>background <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>emptyCtx<span class="token punctuation">)</span>todo       <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>emptyCtx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//返回 emptycxt</span><span class="token keyword">func</span> <span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Context <span class="token punctuation">&#123;</span><span class="token keyword">return</span> background<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Context <span class="token punctuation">&#123;</span><span class="token keyword">return</span> todo<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="cancelCtx-Struct-实现取消功能"><a href="#cancelCtx-Struct-实现取消功能" class="headerlink" title="cancelCtx Struct - 实现取消功能"></a>cancelCtx Struct - 实现取消功能</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//包装Context。创建新的 Context </span><span class="token keyword">type</span> cancelCtx <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Contextmu       sync<span class="token punctuation">.</span>Mutex            <span class="token comment">// 用来保护后面的是那个字段</span>done     <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>         <span class="token comment">// created lazily, closed by first cancel call</span>children <span class="token keyword">map</span><span class="token punctuation">[</span>canceler<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// set to nil by the first cancel call</span>err      <span class="token builtin">error</span>                 <span class="token comment">// set to non-nil by the first cancel call</span><span class="token punctuation">&#125;</span><span class="token comment">//获取 channel；用来判断是否关闭</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cancelCtx<span class="token punctuation">)</span> <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> c<span class="token punctuation">.</span>done <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>d <span class="token operator">:=</span> c<span class="token punctuation">.</span>donec<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> d<span class="token punctuation">&#125;</span><span class="token comment">//获取关闭原因</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cancelCtx<span class="token punctuation">)</span> <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>err <span class="token operator">:=</span> c<span class="token punctuation">.</span>errc<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cancelCtx<span class="token punctuation">)</span> <span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token operator">&amp;</span>cancelCtxKey <span class="token punctuation">&#123;</span><span class="token keyword">return</span> c<span class="token punctuation">&#125;</span><span class="token keyword">return</span> c<span class="token punctuation">.</span>Context<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//取消context</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cancelCtx<span class="token punctuation">)</span> <span class="token function">cancel</span><span class="token punctuation">(</span>removeFromParent <span class="token builtin">bool</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果没有传递取消原因，直接panic</span><span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>  <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"context: internal error: missing cancel error"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//已经存在取消原因，说明已经取消，直接返回</span><span class="token keyword">if</span> c<span class="token punctuation">.</span>err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>  c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token comment">// already canceled</span><span class="token punctuation">&#125;</span>    <span class="token comment">//赋值取消原因</span>c<span class="token punctuation">.</span>err <span class="token operator">=</span> err  <span class="token keyword">if</span> c<span class="token punctuation">.</span>done <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> <span class="token comment">//如果通道是nil。赋值一个关闭的通道</span>c<span class="token punctuation">.</span>done <span class="token operator">=</span> closedchan<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">//如果通道不是 nil 。直接关闭当前通道</span><span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token comment">//遍历子节点，层级关闭</span><span class="token keyword">for</span> child <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>children <span class="token punctuation">&#123;</span><span class="token comment">// NOTE: acquiring the child's lock while holding parent's lock.</span>child<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>c<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token boolean">nil</span>c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//解除绑定关系</span><span class="token keyword">if</span> removeFromParent <span class="token punctuation">&#123;</span><span class="token function">removeChild</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="timerCtx-取消，定时自动取消"><a href="#timerCtx-取消，定时自动取消" class="headerlink" title="timerCtx - 取消，定时自动取消"></a>timerCtx - 取消，定时自动取消</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 对 cancelCtx 的 再次包装</span><span class="token comment">// 在 cancelCtx 的基础上增加了定时器，自动取消功能</span><span class="token keyword">type</span> timerCtx <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>cancelCtxtimer <span class="token operator">*</span>time<span class="token punctuation">.</span>Timer <span class="token comment">// Under cancelCtx.mu.</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">&#125;</span><span class="token comment">//返回到期时间</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>timerCtx<span class="token punctuation">)</span> <span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> c<span class="token punctuation">.</span>deadline<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token comment">//取消自动取消</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>timerCtx<span class="token punctuation">)</span> <span class="token function">cancel</span><span class="token punctuation">(</span>removeFromParent <span class="token builtin">bool</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span>cancelCtx<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">if</span> removeFromParent <span class="token punctuation">&#123;</span><span class="token comment">// Remove this timerCtx from its parent cancelCtx's children.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>cancelCtx<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> c<span class="token punctuation">.</span>timer <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span>c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="valueCtx-struct-实现数据存储"><a href="#valueCtx-struct-实现数据存储" class="headerlink" title="valueCtx struct - 实现数据存储"></a>valueCtx <strong>struct - 实现数据存储</strong></h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//包装 context，实现数据存储</span><span class="token keyword">type</span> valueCtx <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>   Context   key<span class="token punctuation">,</span> val <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//根据 key 获取 value</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>valueCtx<span class="token punctuation">)</span> <span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> c<span class="token punctuation">.</span>key <span class="token operator">==</span> key <span class="token punctuation">&#123;</span><span class="token keyword">return</span> c<span class="token punctuation">.</span>val<span class="token punctuation">&#125;</span><span class="token keyword">return</span> c<span class="token punctuation">.</span>Context<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="propagateCancel、removeChild-绑定-parent-和-child"><a href="#propagateCancel、removeChild-绑定-parent-和-child" class="headerlink" title="propagateCancel、removeChild - 绑定 parent 和 child"></a>propagateCancel、removeChild - 绑定 parent 和 child</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// parent 和 child 设置关联关系；一旦 parent 取消。则 child 取消</span><span class="token keyword">func</span> <span class="token function">propagateCancel</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> child canceler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>done <span class="token operator">:=</span> parent<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//父级永远不会被取消，因此不必把 child 和 parent 做关联</span>    <span class="token comment">//这种情况的parent 一般是 context.Background() OR context.TODO()</span><span class="token keyword">if</span> done <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token comment">// parent is never canceled</span><span class="token punctuation">&#125;</span>    <span class="token comment">//父级已经被取消，直接取消 child</span><span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span><span class="token comment">// parent is already canceled</span>child<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> parent<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token keyword">default</span><span class="token punctuation">:</span><span class="token punctuation">&#125;</span>    <span class="token comment">//断言父级，断言是否是 cancelCtx</span>    <span class="token comment">//如果是：把 child 放置到 parent 的 children 字段</span>    <span class="token comment">//  如果不是：开启 goroutine 监控父级done，父级取消，则取消child</span><span class="token keyword">if</span> p<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token function">parentCancelCtx</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> p<span class="token punctuation">.</span>err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token comment">// parent has already been canceled</span>child<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> p<span class="token punctuation">.</span>children <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>canceler<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>p<span class="token punctuation">.</span>children<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goroutines<span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>parent<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>child<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> parent<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>child<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//断言 parent Context 的类型是否是 *cancelCtx</span><span class="token keyword">func</span> <span class="token function">parentCancelCtx</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>cancelCtx<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>done <span class="token operator">:=</span> parent<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> done <span class="token operator">==</span> closedchan <span class="token operator">||</span> done <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span>p<span class="token punctuation">,</span> ok <span class="token operator">:=</span> parent<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cancelCtxKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>cancelCtx<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span>p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ok <span class="token operator">=</span> p<span class="token punctuation">.</span>done <span class="token operator">==</span> donep<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> p<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token comment">// removeChild removes a context from its parent.</span><span class="token keyword">func</span> <span class="token function">removeChild</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> child canceler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token function">parentCancelCtx</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> p<span class="token punctuation">.</span>children <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">delete</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>children<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Withcancel、WithDeadline、WithTimeout、WithValue"><a href="#Withcancel、WithDeadline、WithTimeout、WithValue" class="headerlink" title="Withcancel、WithDeadline、WithTimeout、WithValue"></a>Withcancel、WithDeadline、WithTimeout、WithValue</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// cancelCtx struct 包一下Context，然后返回</span><span class="token keyword">func</span> <span class="token function">WithCancel</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">)</span> <span class="token punctuation">(</span>ctx Context<span class="token punctuation">,</span> cancel CancelFunc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c <span class="token operator">:=</span> <span class="token function">newCancelCtx</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token function">propagateCancel</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> c<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> Canceled<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 在 cancelCtx 的基础上，支持定时自动取消功能</span><span class="token keyword">func</span> <span class="token function">WithDeadline</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> d time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token punctuation">(</span>Context<span class="token punctuation">,</span> CancelFunc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> cur<span class="token punctuation">,</span> ok <span class="token operator">:=</span> parent<span class="token punctuation">.</span><span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span><span class="token function">Before</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// The current deadline is already sooner than the new one.</span><span class="token keyword">return</span> <span class="token function">WithCancel</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>c <span class="token operator">:=</span> <span class="token operator">&amp;</span>timerCtx<span class="token punctuation">&#123;</span>cancelCtx<span class="token punctuation">:</span> <span class="token function">newCancelCtx</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>deadline<span class="token punctuation">:</span>  d<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token function">propagateCancel</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> c<span class="token punctuation">)</span>dur <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">if</span> dur <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> DeadlineExceeded<span class="token punctuation">)</span> <span class="token comment">// deadline has already passed</span><span class="token keyword">return</span> c<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> c<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> Canceled<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> c<span class="token punctuation">.</span>err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span>timer <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">AfterFunc</span><span class="token punctuation">(</span>dur<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> DeadlineExceeded<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> c<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> c<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> Canceled<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定时取消的变一种形式，传递的不再是到期时间，而是相对当前时间的时间间隔</span><span class="token keyword">func</span> <span class="token function">WithTimeout</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">(</span>Context<span class="token punctuation">,</span> CancelFunc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">WithDeadline</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 在 context 存储数据</span><span class="token keyword">func</span> <span class="token function">WithValue</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> Context <span class="token punctuation">&#123;</span><span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"nil key"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token operator">!</span>reflectlite<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Comparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"key is not comparable"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>valueCtx<span class="token punctuation">&#123;</span>parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基于 cancelCtx、timerCtx、valueCtx 三中 struct 以及对应的方法。实现了 批量、定时发送取消信号、数据存储的功能。其中 核心方法包括</p><ul><li>cancel() 用于发送取消信号（通过关闭通道 close(c.done) 发送）</li><li>propagateCancel() 关联 parent 和 child。做到一旦 parent cancel 则 child cancel</li><li>WithValue() 通过key获取存储的value</li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Context </tag>
            
            <tag> GO </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
